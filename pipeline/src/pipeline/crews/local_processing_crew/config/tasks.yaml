frontend_task:
  description: >
    Build and fix frontend (React/Node.js) projects. This task must complete successfully
    before the backend task can proceed.
    
    Context:
    - Repository: {repo_name}
    - PR Number: {pr_number}
    - Directory: {workspace_path} (format: workspace/repo_name_PRnumber)
    - Refined Files: {refined_files} (only work with these files)
    
    Steps:
    1. Check if any frontend projects exist by looking for package.json files in refined_files
    2. If NO package.json files found:
       - Report: "No frontend projects detected - skipping frontend build"
       - Return success status to allow backend task to proceed
    3. If package.json files found:
       - For each package.json file in refined_files:
         * Navigate to the directory containing the package.json
         * Use file_read_tool to read the package.json file
         * Check if a "build" script exists in the package.json
         * If no "build" script exists, add a dummy build script: "build": "echo 'Build completed successfully'"
         * Use file_writer_tool to write the updated package.json back
         * Run: npm install --legacy-peer-deps using build_tool
         * Run: npm run build using build_tool
         * If build fails, analyze the error and fix it:
           - For dependency errors: Use web search to find compatible versions and solutions
           - For other errors: Use web search to find solutions
           - Apply fixes using file_writer_tool
           - Re-run npm install --legacy-peer-deps and npm run build
         * Continue fixing and re-building until success or max attempts reached
    4. Report final status: success (all builds passed) or failure (could not fix all issues)
    
    Important Notes:
    - The repository is already cloned and all refined files have been applied
    - Use directory_read_tool to explore the workspace structure
    - Use file_read_tool to read package.json and other files
    - Use file_writer_tool to write corrected files
    - Use build_tool to run npm commands
    - ALWAYS use web search to find compatible package versions and error solutions
    - Only work with files that are in the refined_files context
    - For frontend projects, only run npm install --legacy-peer-deps and npm run build (skip npm test)
    - Always check for build script existence and add dummy script if missing
    - Use --legacy-peer-deps flag to handle peer dependency conflicts
    - This task MUST complete successfully for the backend task to proceed
    
    Return a detailed report of the frontend build process and final status.
  expected_output: >
    A detailed report containing:
    - Whether frontend projects were detected
    - If frontend projects exist: Build status (success/failure)
    - If frontend projects exist: List of any build errors encountered and fixes applied
    - If frontend projects exist: Information about any dummy build scripts that were added
    - Final status: "SUCCESS" (all builds passed) or "FAILURE" (could not fix all issues)
    - The workspace path used
  agent: frontend_agent

backend_task:
  description: >
    Build and fix backend (Java/Maven) projects. This task only runs after the frontend task
    has completed successfully.
    
    Context:
    - Repository: {repo_name}
    - PR Number: {pr_number}
    - Directory: {workspace_path} (format: workspace/repo_name_PRnumber)
    - Refined Files: {refined_files} (only work with these files)
    - Frontend Task Result: (result from previous frontend task)
    
    Steps:
    1. Check if any backend projects exist by looking for pom.xml files in refined_files
    2. If NO pom.xml files found:
       - Report: "No backend projects detected - skipping backend build"
       - Return success status
    3. If pom.xml files found:
       - For each pom.xml file in refined_files:
         * Navigate to the directory containing the pom.xml
         * Use file_read_tool to read the pom.xml file
         * Run: mvn clean install -DskipTests using build_tool
         * If build fails, analyze the error and fix it:
           - For dependency errors: Use web search to find compatible versions
           - For compilation errors: Use web search to find solutions
           - Apply fixes using file_writer_tool
           - Re-run mvn clean install -DskipTests
         * Continue fixing and re-building until success or max attempts reached
    4. Report final status: success (all builds passed) or failure (could not fix all issues)
    
    Important Notes:
    - This task only runs after frontend_task has completed successfully
    - The repository is already cloned and all refined files have been applied
    - Use directory_read_tool to explore the workspace structure
    - Use file_read_tool to read pom.xml and other files
    - Use file_writer_tool to write corrected files
    - Use build_tool to run mvn commands
    - Use web search to find dependency versions and error solutions
    - Only work with files that are in the refined_files context
    - For Java (Maven) projects, always use mvn clean install -DskipTests
    - This task can run independently if no frontend projects exist
    
    Return a detailed report of the backend build process and final status.
  expected_output: >
    A detailed report containing:
    - Whether backend projects were detected
    - If backend projects exist: Build status (success/failure)
    - If backend projects exist: List of any build errors encountered and fixes applied
    - Final status: "SUCCESS" (all builds passed) or "FAILURE" (could not fix all issues)
    - The workspace path used
  agent: backend_agent
