run_and_test_task:
  description: >
    Run builds and tests to validate that the code changes work correctly.
    
    Context:
    - Repository: {repo_name}
    - PR Number: {pr_number}
    - Directory: {workspace_path} (format: workspace/repo_name_PRnumber)
    - Build Files: {build_files}
    - Refined Files: {refined_files} (only work with these files)
    
    Steps:
    1. Review the build_files context to understand what projects need to be built
    2. For each package.json file in build_files.package_json:
       - Navigate to the directory_path specified
       - Use file_system_tool to read the package.json file
       - Check if a "build" script exists in the package.json
       - If no "build" script exists, add a dummy build script: "build": "echo 'Build completed successfully'"
       - Run: npm install
       - Run: npm run build
       - DO NOT run npm test (skip testing for now)
    3. For each pom.xml file in build_files.pom_xml:
       - Navigate to the directory_path specified  
       - Run: mvn clean install
    4. Capture any build errors and warnings
    5. Report the build status and any issues found
    
    Important Notes:
    - The repository is already cloned and all refined files have been applied
    - Use the directory_path from build_files context for each project
    - Use the build_tool to run commands with the correct project_path
    - Only work with files that are in the refined_files context - do not create any new files
    - For frontend projects, only run npm install and npm run build (skip npm test)
    - Always check for build script existence and add dummy script if missing
    - If the build fails, provide detailed error analysis for the fix_code_task
    
    Return a detailed report of the build process and any errors encountered.
  expected_output: >
    A detailed report containing:
    - Build status (success/failure).
    - List of any build errors encountered.
    - Any warnings or issues found during the process.
    - The workspace path used.
    - Information about any dummy build scripts that were added.
  agent: run_and_test_agent

fix_code_task:
  description: >
    Analyze any build or test errors from the previous step and fix them.
    
    You have access to the output from the run_and_test_task. Review that output to understand:
    - What build or test errors occurred.
    - Which files were affected.
    
    Context:
    - Build Files: {build_files} (contains paths to package.json and pom.xml files)
    - Refined Files: {refined_files} (only modify these files)
    
    Steps:
    1. Review the build and test results from the previous task.
    2. Extract the list of errors and affected files.
    3. Use the file_system_tool to read the affected files and understand the current code.
    4. Analyze each error in detail to identify the root cause.
    5. Provide specific code fixes for each issue.
    6. Use the file_system_tool to write the corrected files back to the filesystem.
    7. Return a final report of all fixes applied.
    
    Important Notes:
    - Work in the {workspace_path} directory.
    - Use the file_system_tool to read and write files.
    - ONLY modify files that are in the refined_files context - do not create any new files
    - Provide a comprehensive report of all changes made.
    
    Return a detailed report of all fixes applied.
  expected_output: >
    A comprehensive report containing:
    - List of all build or test errors that were encountered.
    - Specific fixes applied to each file.
    - Explanation of what each fix addresses.
  agent: fix_code_agent
