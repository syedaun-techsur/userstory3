validate_builds_task:
  description: >
    Run builds to validate that the applied code changes work correctly.
    
    Context:
    - Repository: {repo_name}
    - PR Number: {pr_number}
    - Directory: {workspace_path} (format: workspace/repo_name_PRnumber)
    
    Steps:
    1. Navigate to the workspace directory: {workspace_path}
    2. Detect the project type (Node.js, Java/Maven, etc.) by looking for build files
    3. Run the appropriate build commands:
       - For Node.js projects: npm install && npm run build
       - For Java/Maven projects: mvn clean install -DskipTests
       - For other projects: detect and run appropriate build commands
    4. Capture any build errors or warnings
    5. Report the build status and any issues found
    
    Important Notes:
    - The repository is already cloned and all refined files have been applied
    - Work directly in the {workspace_path} directory (e.g., workspace/microsoft_vscode_PR12345)
    - Use the build_tool to run build commands
    - If build fails, provide detailed error analysis for the next task
    - You can use file_system_tool to examine files if needed for error analysis
    
    Return a detailed report of the build process and any errors encountered.
  expected_output: >
    A detailed report containing:
    - Build status (success/failure)
    - List of any build errors encountered
    - List of files that were successfully processed
    - Any warnings or issues found during the build process
    - The workspace path used for the build
  agent: build_and_fix_agent

fix_errors_task:
  description: >
    Analyze any build errors from the validation step and fix them, then test the fixes.
    
    You have access to the output from the previous build validation task. Review that output to understand:
    - What build errors occurred
    - Which files were affected
    - What the build status was
    
    Steps:
    1. Review the build validation results from the previous task
    2. Extract the list of build errors and affected files from the previous task output
    3. Use file_system_tool to read the affected files and understand the current code
    4. Analyze each build error in detail
    5. Identify the root cause of each error
    6. Provide specific code fixes for each issue
    7. Use file_system_tool to write the corrected files back to the filesystem
    8. Test your fixes by running builds again using build_tool
    9. If there are still errors, repeat the fix-test cycle until all builds pass
    10. Return a final report of all fixes applied and the final build status
    
    Important Notes:
    - You are the same agent that ran the build, so you maintain full context
    - Work in the {workspace_path} directory (e.g., workspace/microsoft_vscode_PR12345)
    - Iterate through fix-test cycles until all builds pass
    - Use both file_system_tool and build_tool as needed
    - Provide a comprehensive report of all changes made
    
    Return a detailed report of all fixes applied and the final build status.
  expected_output: >
    A comprehensive report containing:
    - List of all build errors that were encountered
    - Specific fixes applied to each file
    - Explanation of what each fix addresses
    - Final build status after all fixes
    - Number of fix-test cycles performed
    - Any remaining issues or warnings
  agent: build_and_fix_agent
